# note, task, todo in terminal



################# functions ############
# view note/task different ways
# glow https://github.com/charmbracelet/glow
_view(){
  clear
  folder=$1; opt=$2; viewer=cat
  if [[ $2 == *'glow' ]]; then  
    opt=$3; viewer=glow
  fi  

  if [[ "$2" == "" ]]; then              # notev: view today
    date "+%Y-%m-%d"
    $viewer $DN_PATH/$1/$(date "+%Y")/$(date "+%m")/$(date "+%Y-%m-%d").txt
  elif [[ $2 == -*d ]]; then             # notev -1d 
    echo $(date -v${2} "+%Y-%m-%d")
    $viewer $DN_PATH/$1/$(date -v${2} "+%Y")/$(date -v${2} "+%m")/$(date -v${2} "+%Y-%m-%d").txt
  elif [[ $2 == -*m ]]; then             # notev -1m
    echo $(date -v${2} "+%Y")/$(date -v${2} "+%m")
    find $DN_PATH/$1/$(date -v${2} "+%Y")/$(date -v${2} "+%m")/ -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
  elif [[ $2 == "month" ]]; then         # notev month
    find $DN_PATH/$1/$(date "+%Y")/$(date "+%m")/ -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
	elif [[ "$2" == "year" ]]; then        # notev year
    find $DN_PATH/$1/$(date "+%Y")/* -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
	elif [[ "$2" == "all" ]]; then         # notev all
    find $DN_PATH/$1/* -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
  else                                   # notev 2022-01, notev 2022, notev 2022-02-1 whatever matches
    len=${#opt}
    if [[ $len -gt 9 ]]; then            # notev 2021-11-12
      echo ${opt}.txt; echo "=============="
      $viewer $DN_PATH/$folder/${opt:0:4}/${opt:5:2}/${opt}.txt
    elif [[ $len -gt 6 ]]; then          # notev 2021-11,   notev 2022-02-2
      find $DN_PATH/$folder/${opt:0:4}/${opt:5:2}/${opt}* -type f -exec basename {} \;  -exec echo "==============" \; -exec $viewer {} \; -exec echo "" \;       
    elif [[ $len -gt 3 ]]; then          # notev 2021
      find $DN_PATH/$folder/${opt:0:4}/ -type f -exec basename {} \; -exec echo "==============" \; -exec $viewer {} \; -exec echo "" \;   
    fi
  fi
}

# edit note/task different ways
_edit() {
  folder=$1; opt=$2; editor=vim  
  if [[ $2 == *'code' ]]; then  # code, vscode
    opt=$3; editor=code
  fi

  if [[ $opt == -*d ]]; then                # notee <vscode> -2d
    mfolder=$DN_PATH/$folder/$(date -v${opt} "+%Y")/$(date -v${opt} "+%m"); mkdir -p $mfolder
    $editor $mfolder/$(date -v${opt} "+%Y-%m-%d").txt
  elif [[ $opt == -*m ]]; then              # notee <vscode> -1m
    mfolder=$DN_PATH/$folder/$(date -v${opt} "+%Y")/$(date -v${opt} "+%m"); mkdir -p $mfolder
    $editor $mfolder
  elif [[ $opt == -*y ]]; then              # notee <vscode> -1y
    $editor $DN_PATH/$folder/$(date -v${opt} "+%Y")/
  elif [[ $opt == 'month' ]]; then           # notee <vscode> year
    $editor $DN_PATH/$folder/$(date "+%Y")/$(date "+%m")
  elif [[ $opt == 'year' ]]; then           # notee <vscode> year
    $editor $DN_PATH/$folder/$(date "+%Y")/
  elif [[ $opt == 'all' ]]; then            # notee <vscode> all
    $editor $DN_PATH/$folder/
  elif [[ $opt == "" ]]; then               # notee <vscode>  : today
    mfolder=$DN_PATH/$folder/$(date "+%Y")/$(date "+%m"); mkdir -p $mfolder    
    $editor $mfolder/$(date "+%Y-%m-%d").txt
  else                                      
    len=${#opt}
    if [[ $len -gt 9 ]]; then               # notee vscode 2021-11-12
      $editor $DN_PATH/$folder/${opt:0:4}/${opt:5:2}/${opt}.txt
    elif [[ $len -gt 6 ]]; then             # notee vscode 2021-11
      $editor $DN_PATH/$folder/${opt:0:4}/${opt:5:2}/
    elif [[ $len -gt 3 ]]; then             # notee vscode 2021
      $editor $DN_PATH/$folder/${opt:0:4}/
    else                                    # notee <vscode> 
      $editor $DN_PATH/$folder/
    fi
  fi
}

########################### daily notes ###############
# Daily Notes Aliases
alias dn="note"
alias dnm="notem"
alias dna="notea"
alias dnv="notev"
alias dne="notee"
alias dnq="noteq"

# enter a note for today, or help
note() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "Help:   dn/note -help"
    echo "Usage:"
    echo "  dn/note   [note]                     - add a note for today"
    echo "  dnm/notem [note]                     - add a multi-line note for today"    
    echo "  dna/notea [-?d|2019-11-01]           - add a note for a given day"
    echo "  dne/notee <vscode> [ |-?d|-?m|-?y|month|year|all|2019-11-01|2021-11|2021]"
    echo "                                       - edit note for a given day"
    echo "  dnv/notev <glow> [ |-?d|-?m|month|year|all|2017-01-01|2017-01]2021]"
    echo "                                       - view notes"
    echo "  dnq/noteq [query]                    - search in all notes"    
  elif [ "$(echo $@|xargs)" != "" ]; then		
    mfolder=$DN_PATH/notes/$(date "+%Y")/$(date "+%m"); mkdir -p $mfolder
    echo "* $@" >> $mfolder/$(date "+%Y-%m-%d").txt
  fi
}

# enter multiple line note for today
notem() {
  m=$(</dev/stdin)
  mfolder=$DN_PATH/notes/$(date "+%Y")/$(date "+%m"); mkdir -p $mfolder  
  echo "* $m" >> $mfolder/$(date "+%Y-%m-%d").txt
}

# append daily note
notea() {
  if [[ $1 == -*d ]]; then    # add to -d day
    mfolder=$DN_PATH/notes/$(date -v${1} "+%Y")/$(date -v${1} "+%m")
    mkdir -p $mfolder
    echo "* ${@:2}" >> $mfolder/$(date -v${1} "+%Y-%m-%d").txt    
  else                       # add to specified date  2022-01-12
    mfolder=$DN_PATH/notes/${1:0:4}/${1:5:2}
    mkdir -p $mfolder
    echo "* ${@:2}" >> /$1.txt
  fi
}

# edit note
notee(){
  _edit "notes" $@
}

# view daily notes
notev(){
  _view "notes" $@
} 

# query daily notes
noteq() {
  if [[ "$1" == "" ]]; then
    echo "noteq q"
  else
    grep -rw --color=always "$@" ${DN_PATH}/notes | sed "s#$DN_PATH/notes/##g" | sed 's/^......../[/' | sed 's/.txt:/] /g'    
  fi
}


################################ dt/task ##########
# Daily Notes Aliases
alias dt="task"
alias dtm="taskm"
alias dta="taska"
alias dtv="taskv"
alias dte="taske"
alias dtq="taskq"

# add a note for today or help
task() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "Help:   dt/task -help"
    echo "Usage:  dt/task   [task]              - add a daily task"
    echo "        dtm/taskm [task]              - add a multi-line daily task"    
    echo "        dta/taska [-?d|2019-11-01]    - add a task for a given day"
    echo "        dte/taske <vscode> [ |-?d|-?m|month|year|2019-11-01|2017-01|all]"
    echo "                                      - edit a task for a given day"
    echo "        dtv/taskv [ |-?d|-?m|month|year|2017-01-01|2017-01|all]"
    echo "                                      - view tasks for a given day"    
    echo "        dts/tasks [query]             - search in all daily tasks"    
  elif [[ "$(echo $@|xargs)" != "" ]]; then			
    echo "* $@" >> $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  fi
}

# multiple line daily task for today
taskm() {
  m=$(</dev/stdin)
  echo "* $m" >>  $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
}

# add a daily task to a specified date, yesterday/tomorrow for convenience
# or relative date:  dno -2 "a note save to 2 days ago"  dno +3 "a note for 3 days later"
taska() {
  if [[ $1 == -* ]]; then      # add to -d day
    echo "* ${@:2}" >> $DN_PATH/tasks/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  else                         # add to specified date
    echo "* ${@:2}" >> $DN_PATH/tasks/${1:0:4}/$1.txt
  fi
}

# view daily tasks: 
taskv() {
  _view "tasks" $@
}

taske(){
  _edit "tasks" $@
}

# search daily tasks
taskq() {
  if [[ "$1" == "" ]]; then
    echo "dtq/taskq q"
  else
    grep -rw --color=always "$@" ${DN_PATH}/tasks | sed "s#$DN_PATH/tasks/##g" | sed 's/^...../[/' | sed 's/.txt:/] /g'    
  fi
}

# ################################ todo ##########
todo() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "\nHelp:   todo -help"
    echo "        todo [todo]        - add a todo"
    echo "        todo [n] done      - mark a todo done"
    echo "        todo [n] redo      - redo a todo"
    echo "        todo [n] del       - del a todo"
    echo "        todov              - view todos"
    echo "        todoe              - vim edit todos"

  elif [[ $# -eq 2 ]] && [[ "$2" = "done" ]]; then
    done_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    echo "$done_item [$(date '+%Y-%m-%d')]" >> $DN_PATH/todo.txt
    todov
  elif [[ $# -eq 2 ]] && [[ "$2" = "del" ]]; then
    del_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    todov  
  elif [[ $# -eq 2 ]] && [[ "$2" = "redo" ]]; then
    redo_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    echo $redo_item | cat - $DN_PATH/todo.txt | tee $DN_PATH/todo.txt.tmp &>nul
    cp $DN_PATH/todo.txt.tmp $DN_PATH/todo.txt
    todov
  else  
    echo "* [$(date '+%Y-%m-%d')] $@" | cat - $DN_PATH/todo.txt | tee $DN_PATH/todo.txt.tmp &>nul
    cp $DN_PATH/todo.txt.tmp $DN_PATH/todo.txt
    todov
  fi
}

todov() {
  clear
  echo "     0  ### TODO ###"
  cat -n $DN_PATH/todo.txt
}

todoe(){
  vim $DN_PATH/todo.txt
}

# todod(){
#   while IFS= read -r line; do
#     printf "$line \n"
#     # if [[ ${line:0:1} == "*" ]]; then
#     #   printf 'x %s\n' "$line"
#     # else
#     #   printf $line
#   done < $DN_PATH/todo.txt
# }

