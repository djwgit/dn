
# Daily Notes Aliases

########################### daily notes ###############
alias note="dn"
alias notem="dnm"
alias notea="dna"
alias notev="dnv"
alias notee="dne"
alias notes="dns"

dn() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "Help:   dn/note -help"
    echo "Usage:  dn/note   [note]                     - add a note for today"
    echo "        dnm/notem [note]                     - add a multi-line note for today"    
    echo "        dna/notea [-n|2019-11-01]            - add a note for a given day"
    echo "        dne/notee [ |-n|2019-11-01|]         - edit note for a given day"
    echo "        dnv/notev [ |-n|2017-01-01|2017-01]  - view notes for a given day"
    echo "        dns/notes [query]                    - search in all notes"    
  elif [ "$(echo $@|xargs)" != "" ]; then		# enter a note for today
    echo "* $@" >> $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  fi
}

# multiple line note for today
dnm() {
  m=$(</dev/stdin)
  echo "* $m" >>  $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt
}

# append daily note
dna() {
  if [[ $1 == -* ]]; then    # add to -d day
    echo "* ${@:2}" >> $DN_PATH/notes/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt    
  else                       # add to specified date
    echo "* ${@:2}" >> $DN_PATH/notes/${1:0:4}/$1.txt
  fi
}

# edit daily notee
dne() {
  if [[ $1 == -* ]]; then      		 	 # edit -d day
    vim $DN_PATH/notes/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  elif [[ "$1" == "" ]]; then   		 # edit today
    vim $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  elif [[ "$1" == "all" ]]; then                    # pick one to edit
    vim $DN_PATH/notes
  elif [[ "$(echo $@|xargs)" == "vscode" ]]; then    # edit with vscode
    code $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  else                                           # edit specified date
    vim $DN_PATH/notes/${1:0:4}/$1.txt
  fi
}

# view daily notes
dnv() {
  #clear
  if [[ "$1" == "" ]]; then                 # view today
    echo $(date "+%Y-%m-%d").txt
    if [ -f $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt ]; then
      cat $DN_PATH/notes/$(date "+%Y")/$(date "+%Y-%m-%d").txt
    fi
  elif [[ $1 == -* ]]; then  # view -d day
    echo $(date "+%Y-%m-%d").txt  
    cat $DN_PATH/notes/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  elif [[ "$1" == "m" ]]; then              # dnv m, dnv m -1
    yyyymm=$(date "+%Y-%m")
    yyyy=$(date "+%Y")
    if [[ $2 == -* ]]; then 
      yyyymm=$(date -v${2}m "+%Y-%m")
      yyyy=$(date -v${2}m "+%Y")
    fi
    find $DN_PATH/notes/$yyyy/$yyyymm* -type f -exec basename {} \; -exec cat {} \; -exec echo "" \; 
	elif [[ "$1" == "all" ]]; then            # view all
    find $DN_PATH/notes/* -type f -exec basename {} \; -exec cat {} \; -exec echo "" \; 
  else                                      # view 2022-01, whatever matches
    find $DN_PATH/notes/${1:0:4}/$1* -type f -exec basename {} \; -exec cat {} \; -exec echo "" \; 
	fi
}

# search daily notes
dns()
{
  if [[ "$1" == "" ]]; then
    echo "notes q"
  else
    grep -rw --color=always "$@" ${DN_PATH}/notes | sed "s#$DN_PATH/notes/##g" | sed 's/^...../[/' | sed 's/.txt:/] /g'    
  fi
}


################################ dn: daily task ##########
alias task="dt"
alias taskm="dtm"
alias taska="dta"
alias taskv="dtv"
alias taske="dte"
alias tasks="dts"

dt() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "Help:   dt/task -help"
    echo "Usage:  dt/task   [task]                            - add a daily task"
    echo "        dtm/taskm [task]                            - add a multi-line daily task"    
    echo "        dta/taska [-n|2019-11-01]                   - add a task for a given day"
    echo "        dte/taske [ |-n|2019-11-01|all|year]        - edit a task for a given day"
    echo "        dtv/taskv [ |-n|2017-01-01|2017-01|all]     - view tasks for a given day"    
    echo "        dts/tasks [query]                           - search in all daily tasks"    
  elif [[ "$(echo $@|xargs)" != "" ]]; then			# enter a note for today
    echo "* $@" >> $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  fi
}

# multiple line daily task for today
dtm() {
  m=$(</dev/stdin)
  echo "* $m" >>  $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
}

# add a daily task to a specified date, yesterday/tomorrow for convenience
# or relative date:  dno -2 "a note save to 2 days ago"  dno +3 "a note for 3 days later"
dta() {
  if [[ $1 == -* ]]; then      # add to -d day
    echo "* ${@:2}" >> $DN_PATH/tasks/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  else                         # add to specified date
    echo "* ${@:2}" >> $DN_PATH/tasks/${1:0:4}/$1.txt
  fi
}

# vim edit daily task
# dte 2019-11-01
# dte -2   # edit note of 2 days ago
# dte all  # vim will list all files to select
dte() {
  if [[ $1 == -* ]]; then                     # edit -d day
    vim $DN_PATH/tasks/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  elif [[ "$1" == "" ]]; then    		          # edit today
    vim $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
  elif [[ "$(echo $@|xargs)" == "vscode" ]]; then    # edit today's dn with vscode
    code $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt    
	elif [[ "$1" == "year" ]]; then               # pick year to edit
    vim $DN_PATH/tasks/$(date "+%Y")
  elif [[ "$1" == "all" ]]; then                # pick one to edit
    vim $DN_PATH/tasks
  else                                        # edit specified date
    vim $DN_PATH/tasks/${1:0:4}/$1.txt
  fi
}


# view daily tasks: 
# view all if no argument, 
# dtv 2019-11 for the month, or for the date
# tv +2/-3 view notes for the given day
dtv() {
  viewer="cat"    # glow
  #clear
  if [[ "$1" == "" ]]; then                 # view today
    echo $(date "+%Y-%m-%d").txt
    if [ -f $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt ]; then
      $viewer $DN_PATH/tasks/$(date "+%Y")/$(date "+%Y-%m-%d").txt
    fi    
  elif [[ $1 == -* ]]; then  # view -d day
    echo $(date "+%Y-%m-%d").txt  
    $viewer $DN_PATH/tasks/$(date -v${1}d "+%Y")/$(date -v${1}d "+%Y-%m-%d").txt
  elif [[ "$1" == "m" ]]; then              # dnv m, dnv m -1
    yyyymm=$(date "+%Y-%m")
    yyyy=$(date "+%Y")
    if [[ $2 == -* ]]; then 
      yyyymm=$(date -v${2}m "+%Y-%m")
      yyyy=$(date -v${2}m "+%Y")
    fi
    find $DN_PATH/tasks/$yyyy/$yyyymm* -type f -exec basename {} \; -exec $viewer {} \; #-exec echo "" \; 
	elif [[ "$1" == "all" ]]; then            # view all
    find $DN_PATH/tasks/* -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
  else                                      # view 2022-01, whatever matches
    find $DN_PATH/tasks/${1:0:4}/$1* -type f -exec basename {} \; -exec $viewer {} \; -exec echo "" \; 
  fi
}

# search daily tasks
dts()
{
  if [[ "$1" == "" ]]; then
    echo "dts/tasks q"
  else
    grep -rw --color=always "$@" ${DN_PATH}/tasks | sed "s#$DN_PATH/tasks/##g" | sed 's/^...../[/' | sed 's/.txt:/] /g'    
  fi
}



################################ todo ##########
todo() {
  if [[ "$1" == *"-help"* ]] || [[ "$1" == "" ]]; then
    echo "\nHelp:   todo -help"
    echo "        todo [todo]        - add a todo"
    echo "        todo [n] done      - mark a todo done"
    echo "        todo [n] redo      - redo a todo"
    echo "        todo [n] del       - del a todo"
    echo "        todov              - view todos"
    echo "        todoe              - vim edit todos"

  elif [[ $# -eq 2 ]] && [[ "$2" = "done" ]]; then
    done_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    echo "$done_item [$(date '+%Y-%m-%d')]" >> $DN_PATH/todo.txt
    todov
  elif [[ $# -eq 2 ]] && [[ "$2" = "del" ]]; then
    del_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    todov  
  elif [[ $# -eq 2 ]] && [[ "$2" = "redo" ]]; then
    redo_item=`head -n $1 $DN_PATH/todo.txt | tail -1`
    cp $DN_PATH/todo.txt $DN_PATH/todo.txt.ori
    sed ${1}d $DN_PATH/todo.txt.ori > $DN_PATH/todo.txt
    echo $redo_item | cat - $DN_PATH/todo.txt | tee $DN_PATH/todo.txt.tmp &>nul
    cp $DN_PATH/todo.txt.tmp $DN_PATH/todo.txt
    todov
  else  
    echo "* [$(date '+%Y-%m-%d')] $@" | cat - $DN_PATH/todo.txt | tee $DN_PATH/todo.txt.tmp &>nul
    cp $DN_PATH/todo.txt.tmp $DN_PATH/todo.txt
    todov
  fi
}

todov() {
  clear
  echo "     0  ### TODO ###"
  cat -n $DN_PATH/todo.txt
}

todoe(){
  vim $DN_PATH/todo.txt
}


todod(){
  while IFS= read -r line; do
    printf "$line \n"
    # if [[ ${line:0:1} == "*" ]]; then
    #   printf 'x %s\n' "$line"
    # else
    #   printf $line
  done < $DN_PATH/todo.txt
}

# notes
#
# both work
# [[ "$1" == "" ]]
# [ "$(echo $@|xargs)" = "" ]
